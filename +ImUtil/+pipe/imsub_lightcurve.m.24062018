function [Res,ResSim]=imsub_lightcurve(RA,Dec,varargin)
% Generate image subtraction light curve from images
% Package: ImUtil.pipe
% Description: Given images of a transient locatio, read the images,
%              register them, construct a reference image, apply image
%              subtraction (Zackay, Ofek & Gal-Yam 2017) and construct an
%              image subtraction light curve at the transient location.
% Input  : - RA [radians] or NED source name.
%          - Dec [radians].
%          * Arbitrary number of pairs of arguments: ...,keyword,value,...
%            where keyword are one of the followings:
%            'NameServerFun' - name server function handle.
%                       Default is @VO.name.server_ned.
%            'DataDir'- directory at which the images resides.
%                       If empty use current directory.
%                       Default is empty.
%            'GetPTF' - Get PTF images for the requested coordinates.
%                       Default is false.
%            'CleanFiles' - Delete images after reduction.
%                       Default is false.
%            'Filter' - A cell array containing a list of filters to
%                       retrieve and analyze.
%                       Default is {'g','R'}.
%            'DirPerFilter' - A flag indicating if there is (or to create)
%                       a directory per filter (true) or to work in a
%                       single directory (false).
%                       Default is true.
%            'JD'     - JD range to retrieve.
%                       Default is [-Inf Inf].
%            'RefJD'  - A matrix of JD range from which to construct a
%                       reference image. The first column is for start JD
%                       and the second column is for end JD.
%            'SubCoaddFlux' - The program calculate the median value of the
%                       flux at the transient location as measured in the
%                       subtraction images from which the reference was
%                       constructed. If true then this flux will be
%                       subtracted from the LC.
%                       Default is true.
%                       This value is stored in the resulted structure
%                       array. Note that this value may be different than
%                       zero due to the fact that the background is
%                       position dependent.
%            'SectionHalfSize' - Half size [X Y] of image cutout on which
%                       the subtraction will be done.
%                       Default is [511 511].
%            'Buffer' - Number of pixels to remove from image edges after
%                       alignment. Default is 3.
%            'MinDist'- The minimum distance of the transient location from
%                       the image edges.  Images in which the transient
%                       distance from image edge is smaller than this value
%                       will not be used. Default is 64.
%            'ExtraHalfSize' - Number of pixels to add to image section
%                       cutouts. Default is 3.
%            'BackPar'- A cell array of additional arguments to pass to the
%                       background.m function.
%                       Default is {'Block',[256 256]}.
%            'MaxBackLevel' - Discard images which mean background level is
%                       higher than this value.
%                       Default is 5000 electrons.
%            'MinNstar' - Discard images in which the number of extracted
%                       sources is smaller than this value.
%                       Default is 20.
%            'MaxAsymptoticRMS' - Discard images in which the astrometric
%                       registration asymptotic RMS is larger than this
%                       value. Default is 0.1 pix.
%            'FlagSatPar' - A cell array of additional arguments to pass to
%                       the flag_saturated SIM method.
%                       Default is {}.
%            'FlagHolesPar' - A cell array of additional arguments to pass
%                       to the flag_holes SIM method.
%                       Default is {}.
%            'AlignPar' - A cell array of additional arguments to pass to
%                       the align SIM method.
%                       Default is {}.
%            'MagCol' - Magnitude column name in the AstCat object.
%                       Default is 'MAG_PSF'.
%            'MagErrCol'- Magnitude error column name in the AstCat object.
%                       Default is 'MAGERR_PSF'.
%            'xcatPar'  - A cell array of additional arguments to pass to
%                       the xcat function.
%                       Default is {}.
%            'RefCat'   - Photometric calibration reference catalog name.
%                       Default is 'sdss'. See 'xcat' for options.
%            'CalibRadius'- Maximum distance of stars from the transient
%                       to use as as photometric calibrators.
%                       Default is 500 arcsec.
%            'ZP'       - Photometric zero point. Default is 22 mag.
%            'MomRadius'- Moments calculation radius.
%                       Default is 4 pix.
%            'MomSigma' - Moment calculation sigma of Gaussian weight.
%                       Default is 1.5 pix.
%            'MomMaxIter' - Maximum number of moments iterations.
%                       Default is 3.
%            'NrandPos'
%            'Verbose' - Verbose. Default is true. 
% Output : - A structure array with the extracted image subtraction light
%            curve and additional information.
%          * Additional image subtraction data and images.
% License: GNU general public license version 3
%     By : Eran O. Ofek                    Mar 2017
%    URL : http://weizmann.ac.il/home/eofek/matlab/
% Example: [Res,ResSim]=ImUtil.pipe.imsub_lightcurve
% Reliable: 
%--------------------------------------------------------------------------

RAD = 180./pi;

ImageField   = SIM.ImageField;
BackField    = SIM.BackField;
ErrField     = SIM.ErrField;
CatField     = AstCat.CatField;
ColCellField = AstCat.ColCellField;

%[RA,Dec]=VO.name.server_ned('SN2010jl','r')


DefV.NameServerFun        = @VO.name.server_ned;
DefV.DataDir              = []; %'/raid/eran/projects/PTF/Science/indiv/PTF10aaxf/LCzogy/';  %[];  %'/raid/eran/tmp/';
DefV.GetPTF               = false;
DefV.CleanFiles           = false;
DefV.Filter               = {'g','R'};
DefV.DirPerFilter         = true;
DefV.JD                   = [-Inf Inf];
DefV.RefJD                = [-Inf celestial.time.julday([1 7 2010])];
DefV.SubCoaddFlux         = true;
DefV.SatLimit             = 50000;
DefV.SectionHalfSize      = [511 511];
DefV.Buffer               = 9;
DefV.MinDist              = 64;
DefV.ExtraHalfSize        = 3;
DefV.BackPar              = {'Block',[256 256]};
DefV.MaxBackLevel         = 5000;
DefV.MinNstar             = 20;
DefV.MaxAsymptoticRMS     = 0.1;
DefV.FlagSatPar           = {};
DefV.FlagHolesPar         = {};
DefV.AlignPar             = {};
%DefV.MinNumberCommonStars = 10;
DefV.MagCol               = 'MAG_PSF';
DefV.MagErrCol            = 'MAGERR_PSF';
DefV.xcatPar              = {};
DefV.RefCat               = 'SDSSDR10';
DefV.CalibRadius          = 500;   % arcsec
DefV.ZP                   = 22;
DefV.AstromRMS            = 'rrms'; %'asymptotic';  % asymptotic | rrms
DefV.MethodBeta           = 'zp';  % 'zp' | 'zogy'
%DefV.MexThresh            = 7;
DefV.MomRadius            = 4;
DefV.MomSigma             = 1.5;
DefV.MomMaxIter           = 3;
DefV.NrandPos             = 100;
DefV.Verbose              = true;

InPar = InArg.populate_keyval(DefV,varargin,mfilename);


ColCell            = {'XWIN_IMAGE','YWIN_IMAGE','XPEAK_IMAGE','YPEAK_IMAGE',...
                      'X2WIN_IMAGE','Y2WIN_IMAGE','XYWIN_IMAGE',...
                      'ALPHAWIN_J2000','DELTAWIN_J2000',...
                      'SN','SN_UNF','SN_PSF','SN_ADD',...
                      'FLUX_PSF','FLUXERR_PSF','MAG_PSF','MAGERR_PSF','PSF_CHI2','PSF_CHI2BACK','PSF_CHI2CR',...
                      'BACK','BACK_STD',...
                      'FLAGS'};


if (ischar(RA))
    [RA,Dec] = InPar.NameServerFun(RA,'r');
end

if (~iscell(InPar.Filter))
    InPar.Filter = {InPar.Filter};
end

PWD = pwd;
if ~isempty(InPar.DataDir)
    cd(InPar.DataDir);
end

Nband = numel(InPar.Filter);
% for each band
for Iband=1:1:Nband
    Band = InPar.Filter{Iband};
    if (InPar.Verbose)
        fprintf('Download and analyze %s-band images\n',Band);
    end
    
    % cd to Band directory
    if (InPar.DirPerFilter)
        if (~exist(Band,'dir'))
            mkdir(Band);
        end
        cd(Band);
    end
    
    % Retrieve images from PTF
    if (InPar.GetPTF)
        [Link,TableSort,Col,FileName]=VO.PTF.wget_corrim(RA,Dec,'Filter',Band,'JD',InPar.JD,'save','i');
        if (isempty(FileName))
            Files = {};
        else
            Files = FileName.Files_Image;
        end
    end
    
    % or check for files in dir
    FilesD = dir('*.fits');
    Files = {FilesD.name};
    
    %Files = Files(1:20)
    %Files = Files(1:100);
    
    % check if files exist in directory

    Nim = numel(Files);
    
    if (InPar.Verbose)
        fprintf('%d files identified\n',Nim);
    end
    
    if (Nim>0)
    
        % Read header
        H   = FITS.get_head(Files);
        W   = ClassWCS.populate(H);
        % Get source X/Y position
        X   = zeros(Nim,1);
        Y   = zeros(Nim,1);
        for Iim=1:1:Nim
            [X(Iim),Y(Iim)] = coo2xy(W(Iim),[RA,Dec]);
        end
        RoundXY = round([X,Y]);

        % select overlapping X/Y regions that covers RA/Dec position.
        ImageSizeXY = naxis(H);
        %[Section,FlagIn,CenterSection] = ImUtil.Im.best_section(ImageSizeXY, RoundXY, InPar.SectionHalfSize+InPar.ExtraHalfSize, InPar.MinDist);
        [Section,FlagIn,CenterSection] = ImUtil.Im.adaptive_section(ImageSizeXY, RoundXY, InPar.SectionHalfSize+InPar.ExtraHalfSize, InPar.MinDist);



        % remove images in which the requested RA/Dec is near boundry
        Files = Files(FlagIn);
        Section = Section(FlagIn,:);
        Nim = numel(Files);

        if (InPar.Verbose)
            fprintf('%d images were selected out of %d\n',Nim,numel(FlagIn));
        end

        % Read image sections to SIM object
        Sim = FITS.read2sim(Files,'CCDSEC',Section);

        % correct for gain
        Sim = gain_correct(Sim);

        % Sim local background
        Sim = background(Sim,InPar.BackPar{:});
        % Sim globacl background
        SimGlobalBack = background(Sim,'Block','full');


        % remove images with very high background level
        FlagGoodBack  = [SimGlobalBack.BackIm]<InPar.MaxBackLevel;
        % select only images with good background level
        SimGlobalBack = SimGlobalBack(FlagGoodBack);
        Sim           = Sim(FlagGoodBack);
        Files         = Files(FlagGoodBack);
        Section       = Section(FlagGoodBack,:);

        % Extract sources for alignment ---
        [Sim,MetaData] = mextractor(Sim,'ZP',InPar.ZP);

        Ncat = sizecat(Sim);
        FlagCat = Ncat>InPar.MinNstar;
        SimGlobalBack = SimGlobalBack(FlagCat);
        Sim           = Sim(FlagCat);
        Files         = Files(FlagCat);
        Section       = Section(FlagCat,:);

        %--- register the images--- 
        [AlSim,ResFit,IndRef]=align(Sim,[],InPar.AlignPar{:},'AlignMethod','xycoo','Verbose',InPar.Verbose);
        
        % read reference image before changing indices:
        % do not move this line to a different place
        SimFullRef = FITS.read2sim(Files{IndRef});

        % remove images with bad alignement
        FlagAsRMS = [ResFit.AssymptoticRMS]<InPar.MaxAsymptoticRMS;
        if (~FlagAsRMS(IndRef))
            FlagAsRMS(IndRef) = true;
            warning('possible problem');
        end
        SimGlobalBack = SimGlobalBack(FlagAsRMS);
        Sim           = Sim(FlagAsRMS);
        AlSim         = AlSim(FlagAsRMS);
        ResFit        = ResFit(FlagAsRMS);
        Files         = Files(FlagAsRMS);
        Section       = Section(FlagAsRMS,:);
        % note that the index of IndRef changed
        % note that if RefImage wasn't selected than
        % the previous image will bse defined as ref
        % NEED TO MODIFY!
        IndRef        = sum(FlagAsRMS(1:IndRef));

        % read full reference image in order to get astrometry
        %[TargetX,TargetY] = coo2xy(SimFullRef,RA,Dec);
        Wref = ClassWCS.populate(SimFullRef);
        [TargetX,TargetY] = coo2xy(Wref,[RA,Dec]);
        TargetX  = TargetX - Section(IndRef,1)+1;
        TargetY  = TargetY - Section(IndRef,3)+1;
       
        % cross match Full reference image with photometric calibration catalog
        SimFullRef = mextractor(SimFullRef,'ZP',InPar.ZP);

        % cross match Sim with Ref
        %--------------------------
        %[OutRef,Extra] = xcat(SimFullRef,InPar.xcatPar{:});
        [CatBand,CatBandErr,CatColor,CatColorErr]=VO.Util.cat_band_dictionary(InPar.RefCat,Band);

        % CatColor='modelMag_r-modelMag_r';   % No color term
        [ResPhot,OutRef,Extra]=phot_calib(SimFullRef,...
                                          'RefCat',InPar.RefCat,...
                                          'RefRefMag',CatBand,...
                                          'RefRefMagErr',CatBandErr,...
                                          'CalibEqRef',{CatColor},...
                                          'LocalRA',RA,'LocalDec',Dec,'LocalRadius',InPar.CalibRadius./(RAD.*3600),...
                                          'xcatPar',InPar.xcatPar);


        %plot(MatchedRef.Cat(FlagCalib,7),MatchedRef.Cat(FlagCalib,7)-SimFullRef.Cat(FlagCalib,20),'.')

        
        % trim the edges of the images
        SizeIm   = size(AlSim(1).(ImageField));
        FinalSec = [InPar.Buffer SizeIm(2)-InPar.Buffer InPar.Buffer SizeIm(1)-InPar.Buffer]; %[3 1027 3 1027];
        AlSim    = trim_image(AlSim,FinalSec);
        % remove images that contain NaNs
        FlagNN = ~any(nan_search(AlSim),2);
        SimGlobalBack = SimGlobalBack(FlagNN);
        Sim           = Sim(FlagNN);
        AlSim         = AlSim(FlagNN);
        ResFit        = ResFit(FlagNN);
        TargetX       = TargetX - FinalSec(1)+1;
        TargetY       = TargetY - FinalSec(3)+1;
        % Note that the Cat field in AlSim is not updated!!

        % Extract sources again
        % Remove in the future by applying the transformation to the catalog
        % No need as align updated catalog
        %[AlSim,MetaData] = mextractor(AlSim,'ZP',InPar.ZP);

        
        % Match catalogs and estimate relative ZP
        [ZP,Fzp,ResZP]=zp_estimate(AlSim,IndRef,'SkipWCS',true,...
                                              'Columns',{'XWIN_IMAGE','YWIN_IMAGE',InPar.MagCol,InPar.MagErrCol},...
                                              'MagCol',InPar.MagCol,...
                                              'MagErrCol',InPar.MagErrCol);
        
 
        
        
        % coadd images
        % subtract background
        % global background
        % note there is a problem near the bright galaxy - likely related to background subtraction...
        % therefor use global background

        Nsim = numel(AlSim);
        for Isim=1:1:Nsim
            AlSim(Isim) = sub_background(AlSim(Isim));
            AlSim(Isim).Im = AlSim(Isim).Im + SimGlobalBack(Isim).BackIm;
            AlSim(Isim).BackIm = SimGlobalBack(Isim).BackIm;
            AlSim(Isim).ErrIm  = SimGlobalBack(Isim).ErrIm;
        end


        % repopulate Mask:
        % in the future - change scheme
        AlSim = flag_holes(AlSim,'Nsigma',3,InPar.FlagHolesPar{:});
        AlSim = flag_saturated(AlSim,InPar.FlagSatPar{:});
        AlSim = flag_cr_mextractor(AlSim);
        AlSim = flag_cr_mextractor(AlSim,'Method','chi2backcr');
        %AlSim = flag_backgrad(AlSim);
        Nim = numel(AlSim);
        
        % JD of images
        JD = julday(Sim);


        
        % select images for reference image:
        SelIndRef = Util.array.find_ranges(JD,InPar.RefJD);

        if (InPar.Verbose)
            fprintf('Construct reference image from %d images\n',numel(SelIndRef));
        end

        if (numel(SelIndRef)==0)
            error('Cant find images for construction of Reference');
        end
        
        % subtract background and scale images
        % this is needed only for the reference image
        MeanFzpRef = mean(Fzp(SelIndRef));
        
        AlSimBS = sub_background(AlSim(SelIndRef));
        %AlSimBS = scale(AlSimBS,Fzp(SelIndRef)./MeanFzpRef);   % scale the image to the mean level of the images in the ref image
        AlSimBS = scale(AlSimBS,Fzp(SelIndRef));   % scale the image to the mean level of the images in the ref image
        NimRef = numel(AlSimBS);

        % regular coaddition
        [CoaddSim,StdSim,WeightSim]=coadd(AlSimBS,'CoaddMethod','meanclip','MethodZero','none','MethodScale','none');
        % sum the images in order to get an estimate for the background
        [SumCoaddSim]=coadd(AlSim(SelIndRef),'CoaddMethod','sum','MethodZero','none','MethodScale','none');
        SumCoaddSim = background(SumCoaddSim,'Block','full');
        
        % Set the flux level of CoaddSim to be roughly the photon counts
        CoaddSim.(ImageField) = CoaddSim.(ImageField).*NimRef + SumCoaddSim.(BackField);
        
        CoaddSatLimit = InPar.SatLimit.*NimRef + SumCoaddSim.(BackField);
        
        PSFSelectorPar       = {'ColSN','SN',...
                           'ColMaxFlux','PEAKF_VALTOT',...
                           'ColBitFlag','FLAGS',...
                           'MaskVal',0,...
                           'PosCol',{'XWIN_IMAGE','YWIN_IMAGE'},...
                           'BoundryDist',10,...
                           'MinSN',10,...
                           'SatLevel',CoaddSatLimit};
        % find sources in CoaddSim
        CoaddSim = mextractor(CoaddSim,'ZP',InPar.ZP,'PSFSelectorPar',PSFSelectorPar);
        
        % set background to global value
        CoaddSim.(BackField)  = SumCoaddSim.(BackField);
        CoaddSim.(ErrField)   = SumCoaddSim.(ErrField);
        
        %% find photometric solution of CoaddSim (Reference image)
        [R_ast,CoaddSim] = astrometry(CoaddSim,'RA',RA,'Dec',Dec,'Flip',[-1 -1]);   % flip for ZTF!!
        % update RA/Dec in CoaddSim
        CoaddSim = update_coordinates(CoaddSim);
        ResPhot = ImUtil.Im.photometric_calibration(CoaddSim);

        
        
        
        %%
        % estimate the astrometric residual relative to the reference image
        % can be made faster by just calculating residuals 
        [~,ResFit1]=align(AlSim,CoaddSim,InPar.AlignPar{:},'AlignMethod','xycoo','TransformImage',false);

        % Match catalogs and estimate ZP relative to CoaddSim
        IndRefC = numel(AlSim) + 1;
        [ZPC,FzpC,ResZPC]=zp_estimate([AlSim(:);CoaddSim],IndRefC,'SkipWCS',true,...
                                              'Columns',{'XWIN_IMAGE','YWIN_IMAGE',InPar.MagCol,InPar.MagErrCol},...
                                              'MagCol',InPar.MagCol,...
                                              'MagErrCol',InPar.MagErrCol);
        

        % absolute ZP
        %RefImageZP   = InPar.ZP - ResPhot.Par(1);  % the magnitude ZP of AlSim(IndRef)
        %CoaddImageZP = RefImageZP + 2.5.*log10(NimRef); %ZPC(IndRef);
        
        CoaddImageZP = InPar.ZP - ResPhot.Par(1);
        
        % fix PSF for image subtraction
        AlSim    = psf_extrapolate(AlSim);
        CoaddSim = psf_extrapolate(CoaddSim);

        
        switch lower(InPar.AstromRMS)
            case 'asymptotic'
                SigmaX = [ResFit1.AssymptoticRMS];
                SigmaY = [ResFit1.AssymptoticRMS];
                
                FlagSigN = isnan(SigmaX) | isnan(SigmaY);
                if (any(FlagSigN))
                    SigmaXrms = [ResFit1.rrms];
                    SigmaYrms = [ResFit1.rrms];
                    SigmaX(FlagSigN) = SigmaXrms(FlagSigN);
                    SigmaY(FlagSigN) = SigmaYrms(FlagSigN);
                end
            case 'rrms'
                SigmaX = [ResFit1.rrms];
                SigmaY = [ResFit1.rrms];
            otherwise
                error('Unknown AstromRMS option');
        end
        
        %AlSim = single(AlSim);
        switch lower(InPar.MethodBeta)
            case 'zp'
                [Summary,D,S,Scorr,SigmaF]=subtract_proper(AlSim,CoaddSim,'BackReCalc',false,'FluxMatch',FzpC(1:end-1),...
                                    'SigmaX',SigmaX,'SigmaY',SigmaY);
                                
            case 'zogy'
                [Summary,D,S,Scorr,SigmaF]=subtract_proper(AlSim,CoaddSim,'BackReCalc',false,...
                                    'SigmaX',SigmaX,'SigmaY',SigmaY);
            otherwise
                error('Unknown MethodBeta option');
        end
        
        
        % calculate S background
        % suppose to be 0
        S = background(S);

        % store the image subtraction products
        ResSim(Iband).D        = D;
        ResSim(Iband).S        = S;
        ResSim(Iband).Scorr    = Scorr;
        ResSim(Iband).SigmaF   = SigmaF;
        ResSim(Iband).Summary  = Summary;
        ResSim(Iband).CoaddSim = CoaddSim;
        
        
        % detect sharp features in Scorr
        %S1=crdetect_lacos(Scorr,'InterpOverCR',false);

        %D = crdetect_lacos(D,'InterpOverCR',false);


        % read the valus of S at the transient location and normalize ...
        InPar.SrcWin = 2;
        XY = [TargetX, TargetY];
        RoundXY = round(XY);
        
        %XY = [510.7, 70.087];
        %XY = [513 72];
        
        Nd = numel(D);
        
        % measure the source flux via the S image
        % use 
        MomData    = zeros(Nd,9);
        ValPeakMom = nan(Nd,1);
        ValMaskMom = nan(Nd,1);
        SigmaValPeakMom = nan(Nd,1);
        ValPeakMax = nan(Nd,1);
        ValMaskMax = nan(Nd,1);
        SigmaValPeakMax = nan(Nd,1);
        ValPeakMaxSc    = nan(Nd,1);
        for Id=1:1:Nd
          
            [Mom(Id),Mom2(Id),Aper(Id)]=ImUtil.Im.im_moments(D(Id).(ImageField),XY(1),XY(2),InPar.MomRadius,InPar.MomSigma,InPar.MomMaxIter);
            
            
            XX = (RoundXY(1)-InPar.SrcWin:1:RoundXY(1)+InPar.SrcWin);
            YY = (RoundXY(2)-InPar.SrcWin:1:RoundXY(2)+InPar.SrcWin);
            [~,MaxIJ] = Util.stat.maxnd(S(Id).(ImageField)(YY,XX));
            MaxY = YY(MaxIJ(1));
            MaxX = XX(MaxIJ(2));
            
            MomData(Id,:) = [XY, Mom(Id).X, Mom(Id).Y, Mom2(Id).X2, Mom2(Id).Y2, Mom2(Id).XY, MaxX, MaxY];
            
            [ValPeakMax(Id),~,ValMaskMax(Id)]=get_value(S(Id),[MaxX, MaxY]);
            [SigmaValPeakMax(Id)] = get_value(SigmaF(Id),[MaxX, MaxY]);

            [ValPeakMaxSc(Id)]=get_value(Scorr(Id),[MaxX, MaxY]);
           
            if (~isnan(Mom(Id).Y) && ~isnan(Mom(Id).Y))
                if (Mom(Id).X>0 && Mom(Id).X<SizeIm(2) &&  Mom(Id).Y>0 && Mom(Id).Y<SizeIm(1))
                    [ValPeakMom(Id),~,ValMaskMom(Id)]=get_value(S(Id),[Mom(Id).X, Mom(Id).Y]);
                    [SigmaValPeakMom(Id)] = get_value(SigmaF(Id),[Mom(Id).X, Mom(Id).Y]);
                else
                    ValPeakMom(Id) = NaN;
                    ValMaskMom(Id) = NaN;
                    SigmaValPeakMom(Id) = NaN;
                end
            end
        end
        
        Isn = find(ValPeakMaxSc>5);
        if (isempty(Isn))
            warning('Source not found');
            Isn = find(ValPeakMaxSc>0);
        end
        
        %mean(MomData(Isn,3:4))
        Xwm = Util.stat.wmean(MomData(Isn,3),1./ValPeakMaxSc(Isn));
        Ywm = Util.stat.wmean(MomData(Isn,4),1./ValPeakMaxSc(Isn));
        
        Xmm = mean(MomData(Isn,8));
        Ymm = mean(MomData(Isn,9));
        
        % measure the source flux via the S image
        % use assumed coordinates
        [ValPeak,~,ValMask]=get_value(S,XY);
        [SigmaValPeak] = get_value(SigmaF,XY);
        
        [ValPeakMM,~,ValMaskMM]=get_value(S,[Xmm, Ymm]);
        [SigmaValPeakMM] = get_value(SigmaF,[Xmm, Ymm]);
        
        % measure the source flux via the S image
        % use weighted mean coordinates
        [ValPeakWM,~,ValMask]=get_value(S,[Xwm, Ywm]);
        [SigmaValPeakWM] = get_value(SigmaF,[Xwm, Ywm]);
        
        
        F_S     = [Summary.F_S]';
        % flux at targeted (user coordinates) position
        Flux    = ValPeak./F_S;
        % flux at mean position of max light for S/N>5
        FluxMM  = ValPeakMM./F_S;  % recomended
        % flux at wmean position of 1st moment for S/N>5
        FluxWM  = ValPeakWM./F_S;
        % flux at 1st moment position
        FluxMom = ValPeakMom./F_S;
        % flux at max light position
        FluxMax = ValPeakMax./F_S;

        % estimate astrometric noise on photometry
        [SGx,SGy] = gradient(S);
        [SGxPeak] = get_value(SGx,[Xmm Ymm]);
        [SGyPeak] = get_value(SGy,[Xmm Ymm]);
        SGPeak    = sqrt(SGxPeak.^2 + SGyPeak.^2);
       
        
        % Flux at random positions at image
        ImageSize = imagesize(CoaddSim);
        RandXY    = rand(InPar.NrandPos,2).*ImageSize;
        [ValPeakRand]= squeeze(get_value(S(:),RandXY));
        FluxRand = ValPeakRand./[Summary.F_S]';
        
        FluxRandSig = squeeze(get_value(SigmaF,RandXY));
        RandChi2    = sum((FluxRand./FluxRandSig).^2,2);
        RandDof     = InPar.NrandPos;
        
        % Flux of transient in ref images
        FluxCoadd       = FluxMM(SelIndRef);
        FluxCoaddMedian = median(FluxCoadd);
        FluxCoaddStd    = std(FluxCoadd);
        FluxCoaddNim    = numel(FluxCoadd);

        %
        if (InPar.SubCoaddFlux)
            Flux     = Flux     - FluxCoaddMedian;
            FluxMM   = FluxMM   - FluxCoaddMedian;
            FluxWM   = FluxWM   - FluxCoaddMedian;
            FluxMom  = FluxMom  - FluxCoaddMedian;
            FluxMax  = FluxMax  - FluxCoaddMedian;
            %FluxRand = FluxRand - median(FluxRand(SelIndRef,:));
        end
        
        Res(Iband).FluxCoadd       = FluxCoadd;
        Res(Iband).FluxCoaddMedian = FluxCoaddMedian;
        Res(Iband).FluxCoaddStd    = FluxCoaddStd;
        Res(Iband).FluxCoaddNim    = FluxCoaddNim;
        Res(Iband).RefJD           = InPar.RefJD;

        
        % estimate the phot. err. including astrometric noise and chi2/dof
        % correction
        SigmaAll = SigmaValPeakMM.*max(1,sqrt(RandChi2./RandDof));
        SigmaPos = sqrt(SigmaX(:).^2 + SigmaY(:).^2);
        SigmaPhotAstrom = SGPeak.*SigmaPos./F_S;
        SigmaAll = sqrt(SigmaAll.^2 + SigmaPhotAstrom.^2);

        Mag  = convert.luptitude(Flux,10.^(0.4.*CoaddImageZP));

        % FluxRand statistics
        %FluxStdRand = Util.stat.rstd(FluxRand,2);
        FluxStdRand = std(FluxRand,[],2);

        % Mask
        Filter=Kernel2.aper(7);
        Filter(Filter>0) = 1;
        Filter = uint32(Filter);

        AlSimMask = ufun2sim(AlSim,@imdilate,'ExecField',{'Mask'},'FunAddPar',{Filter});
        AlSimMask = mask_add(AlSimMask,D);

        [~,~,ValMask]=get_value(AlSimMask,XY);
    

        % mean flux offset of the S image
        OffsetS = ([S.BackIm]./[Summary.F_S]).';
        Beta    = [Summary.Beta].';
        GeodPos = geodpos(Sim);
        [AM,AzAlt] = celestial.coo.airmass(JD,RA,Dec,[[GeodPos.Long].',[GeodPos.Lat].']);

        Res(Iband).ZP = CoaddImageZP;
        Res(Iband).ColorTerm = ResPhot.Par(2);
        Res(Iband).RefCatBand = CatBand;
        Res(Iband).RefCatBandColor = CatColor;
        Res(Iband).Filter = Band;
        Res(Iband).CatLC = AstCat;
        ONES = ones(size(JD));
        Res(Iband).CatLC.(CatField) = [JD, FluxMM, SigmaValPeakMM, FluxStdRand, SigmaAll, Mag, OffsetS, Beta, AM, AzAlt.*RAD, MomData, FluxCoaddMedian.*ONES, FluxCoaddStd.*ONES, FluxCoaddNim.*ONES, SigmaX(:), SigmaY(:), SGPeak, RandChi2, RandDof.*ONES, ValMask];
        Res(Iband).CatLC.(ColCellField) = {'JD','FluxMM','FluxErr','FluxStdRand','SigmaAll','Mag','OffsetS','Beta','AM','Az','Alt','Xforce','Yforce','X','Y','X2','Y2','XY','Xmax','Ymax','FluxCoaddMedian','FluxCoaddStd','FluxCoaddNim','SigmaX','SigmaY','GradPeak','RandChi2','RandDof','FLAGS'};

        Res(Iband).CatLC = colcell2col(Res(Iband).CatLC);
        Res(Iband).CatLC = sortrows(Res(Iband).CatLC,1);

        
        

%         % find transients
%         Thresh = 5;
%         Nsim = numel(Scorr);
%         for Isim=1:1:Nsim
%             Icand = find(abs(Scorr(Isim).(ImageField))>Thresh);
%             [Yc,Xc] = ind2sub(size(Scorr(Isim).(ImageField)),Icand);
%             [~,~,ValMask]=get_value(AlSimMask(Isim),[Xc,Yc]);
%             ValMask = squeeze(ValMask);
%             Im0 = find(ValMask==0);
%             Xc = Xc(Im0);
%             Yc = Yc(Im0);
%             [TMom(Id),TMom2(Id)]=ImUtil.Im.im_moments(D(Isim).(ImageField),Xc, Yc,InPar.MomRadius,InPar.MomSigma,InPar.MomMaxIter);
%             [Xc,Yc] %, TMom2(Id).X2, TMom2(Id).Y2, TMom2(Id).XY ]
% 
%             ds9(AlSim(Isim),1); pause(0.5);
%             ds9(Scorr(Isim),2); pause(0.5);
%             ds9(double(abs(Scorr(Isim))>5),3); pause(0.5);
%             ds9(D(Isim),4); pause(0.5);
%             %ds9.lock_xy(true); pause(0.5);
%             ds9.plot(Xc,Yc);
%         end



        if (InPar.CleanFiles)
            % delete PTF images
            Util.files.delete_cell(FileName);
        end
    end
    
    if (InPar.DirPerFilter)
        cd('../');
    end
    
    % write results to file:
    TextFile = sprintf('LC_Band_%s.txt',Band);
    FID      = fopen(TextFile,'w');
    fprintf(FID,'%% Generated by: ImUtil.pipe.imsub_lightcurve\n');
    fprintf(FID,'%% Eran Ofek\n');
    fprintf(FID,'%% Generation date: %04d-%02d-%02d %02d:%02d%04.1f\n',clock);
    fprintf(FID,'%% \n');
    fprintf(FID,'%% Filter: %s\n',Band);
    fprintf(FID,'%% Number of images in reference: %d\n',Res(Iband).FluxCoaddNim);
    fprintf(FID,'%% ZP: %8.3f\n',Res(Iband).ZP);
    fprintf(FID,'%% JD, Flux, FluxErr, FluxStdRand, Mag, OffsetS, Beta, AM, Az, Alt, Xforce, Yforce, X, Y, X2, Y2, XY, FLAGS\n');
    fprintf(FID,'%14.6f %10.5f %10.5f %10.5f %8.3f %e %e %5.3f %6.3f %6.3f %7.2f %7.2f %7.2f %7.2f %6.3f %6.3f %6.3f %12d\n',Res(Iband).CatLC.Cat.');
    fclose(FID);
    
    
end

% cd to original directory
cd(PWD);