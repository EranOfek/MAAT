%--------------------------------------------------------------------------
% AstCat class                                                       class
% Description: A class of structure of a single catalog (AstCat).
%              Note that this class is a subset of the SIM class.
% Input  : null
% Output : null
% Tested : Matlab R2015b
%     By : Eran O. Ofek                    Feb 2016
%    URL : http://weizmann.ac.il/home/eofek/matlab/
% Reliable: 2
%--------------------------------------------------------------------------

classdef AstCat < handle
    properties (SetAccess = public)
        Cat
        Col
        ColCell
        ColUnits
        SortedBy
        SortedByCol
        Source
        Reference
        Version
        UserData
    end
  
    methods

        function obj=isastcat(AstC)
            obj = true;
        end


        % See list of overload functions
        % http://www.mathworks.com/help/matlab/matlab_oop/implementing-operators-for-your-class.html

        
        %----------------------
        %--- Column indices ---
        %----------------------
        
        function ColInd=colname2ind(AstC,ColName)
            % Description: Given AstCat object convert column name to
            %              column index.
            % Input  : - A single AstCat object.
            %          - Colum name, or a cell array of column names.
            %            If numeric then return the input as is.
            % Output : - Column indices.
            % Example: ColInd=colname2ind(AstC,'XWIN_IMAGE')
            %          ColInd=colname2ind(AstC,{'XWIN_IMAGE','YWIN_IMAGE'})
            
            if (numel(AstC)>1),
                error('AstCat must be a single element object');
            end
            
            if (~isnumeric(ColName)),
                % ColName is a string
                if (~iscell(ColName)),
                    ColName = {ColName};
                end
                Ncn = numel(ColName);
                ColInd = zeros(Ncn,1);
                for Icn=1:1:Ncn,
                    ColInd(Icn) = AstC.Col.(ColName{Icn});
                end
            else
                % return as is
                ColInd = ColName;
            end
            
            if (nargout>1),
                % the user requested for the ColInd in
                % different parameters
                Ncn = numel(ColInd);
                CellColInd = num2cell(ColInd);
                [varargout{1:Ncn}] = deal(CellColInd{:});
                
            end
            
        end
        
        function ColName=ind2colname(AstC,ColInd)
            % Description: Given AstCat object convert column index to
            %              column name.
            % Input  : - A single AstCat object.
            %          - Vector of colum indices.
            %            If a string or a cell array of strings reten as
            %            is.
            % Output : - Cell array of column names.
            % Example: ColName=colname2ind(AstC,[1 2])
            
            if (numel(AstC)>1),
                error('AstCat must be a single element object');
            end
            
            if (isnumeric(ColInd)),
                Ncn = numel(ColInd);
                ColName = cell(1,Ncn);
                for Icn=1:1:Ncn,
                    ColName{Icn} = AstC.ColCell{ColInd(Icn)};
                end
            else
                % input is string - return as is.
                ColName = ColInd;
            end
        end
        
        %------------
        %--- Sort ---
        %------------
        
        function [AstC,SI]=sortrows(AstC,Col)
            % Description: Sort an AstCat object by a given column.
            % Input  : - AstCat object.
            %          - Column name or index to sort by.
            %            If negative column index than sort by descending
            %            order.
            %            Also can be a cell array of names or a vector.
            % Output : - Sorted AstCat object.
            %            Also updated the SortedBy and SortedByCol fields.
            %          - Indices of the original indices sorted.
            % Example: AstC=sortrows(AstC,[2 -3]);
            %          AstC=sortrows(AstC,'YWIN_IMAGE');
            %          AstC=sortrows(AstC,{'YWIN_IMAGE','XWIN_IMAGE'});
            
            if (numel(AstC)>1),
                error('AstCat must be a single element object');
            end
            
                if (ischar(Col)),
                    Col = colname2ind(AstC,Col);
                end
                [AstC.Cat,SI]    = sortrows(AstC.Cat,Col);
                AstC.SortedBy    = ind2colname(AstC,Col);
                AstC.SortedByCol = colname2ind(AstC,Col);
            
        end
        
        function [Ans,AstC]=issorted(AstC,Col)
            % Description: Check if an AstCat object is sorted by a given
            %              column.
            % Input  : - AstCat object.
            %          - Column name or index to check.
            % Output : - Vector of logicals per each AstCat element.
            %            True if sorted by column, false otherwise.
            %          - AstCat object in which the SortedBy and
            %            SortedByCol fields are updated.
            % Example: [Ans,AstC]=issorted(AstC,'YWIN_IMAGE');
            %          
            
            if (numel(AstC)>1),
                error('AstCat must be a single element object');
            end
            
            if (ischar(Col)),
                Col = colname2ind(AstC,Col);
            end
            
            %Ns  = numel(AstC);
            %Ans = zeros(size(AstC)); 
                Ans = issorted(AstC.Cat,Col);
                if (nargout>1),
                    if (Ans),
                        % sorted
                        AstC.SortedBy    = ind2colname(AstC,Col);
                        AstC.SortedByCol = colname2ind(AstC,Col);
                    else
                        AstC.SortedBy    = [];
                        AstC.SortedByCol = [];
                    end
                end
        end
        
        %--------------------------------
        %--- Populate Col and ColCell ---
        %--------------------------------
        
        function [AstC,Col]=colcell2col(AstC)
            % Description: Repopulate the Col field based on the
            %              ColCell field.
            % Input  : - AstCat object.
            % Output : - AstCat object with the Col field repopulated.
            %          - The Col field of the last element in the
            %            AstCat array.
            % Example: [AstC,Col]=colcell2col(AstC)
            
            if (numel(AstC)>1),
                error('AstCat must be a single element object');
            end
            
            %Nc = numel(AstC);
            AstC.Col = cell2struct(num2cell(1:1:numel(AstC.ColCell)),AstC.ColCell,2);
            Col = AstC.Col;
        
        end
        
        function [AstC,ColCell]=col2colcell(AstC)
            % Description: Repopulate the ColCell field based on the
            %              Col field.
            % Input  : - AstCat object.
            % Output : - AstCat object with the ColCell field repopulated.
            %          - The ColCell field of the last element in the
            %            AstCat array.
            % Example: [AstC,ColCell]=col2colcell(AstC)
            
            if (numel(AstC)>1),
                error('AstCat must be a single element object');
            end
            
            %Nc = numel(AstC);
                Fields = fieldnames(AstC.Col);
                Vals   = struct2cell(AstC.Col);
                [~,SI] = sort(cell2mat(Vals));
                AstC.ColCell = Fields(SI).';
            ColCell = AstC.ColCell;
        
        end
        
        function AstC=table2col(AstC)
            % Description: Given an AstCat object with a table object
            %              in the Cat field, populate the .Col and .ColCell
            %              fields based on the content of the table column
            %              names.
            
            
            
        end
        
        %--------------------------
        %--- Columns operations ---
        %--------------------------
        
        function AstC=col_select(AstC,Col)
            % Description: Select specific columns from an AstCat
            %              class object.
            % Input  : - AstCat class object.
            %          - Columns indices or a cell array of column
            %            names to select.
            % Output : - AstCat class object with the selected columns.
            % Example: AstC=col_select(AstC,{'XWIN_IMAGE','YWIN_IMAGE'})
            
            CatField         = 'Cat';
            %ColField         = 'Col';
            ColCellField     = 'ColCell';
            ColUnitsField    = 'ColUnits';
            SortedByField    = 'SortedBy';
            SortedByColField = 'SortedByCol';
            
            
            %Nc = numel(AstC);
            %for Ic=1:1:Nc,
                ColInd = colname2ind(AstC,Col);
                AstC.(CatField) = AstC.(CatField)(:,ColInd);
                if (~isempty(AstC.(ColCellField))),
                    AstC.(ColCellField) = AstC.(ColCellField)(ColInd);
                    AstC = colcell2col(AstC);
                end
                if (~isempty(AstC.(ColUnitsField))),
                    AstC.(ColUnitsField) = AstC.(ColUnitsField)(ColInd);
                end
                AstC.(SortedByField) = [];
                AstC.(SortedByColField) = [];
            %end
        end
        
        function AstC=col_delete(AstC,Col)
            % Description: Delete specific columns from an AstCat
            %              class object.
            % Input  : - AstCat class object.
            %          - Columns indices or a cell array of column
            %            names to delete.
            % Output : - AstCat class object with the deleted columns.
            % Example: AstC=col_select(AstC,{'XWIN_IMAGE','YWIN_IMAGE'})
            
            CatField         = 'Cat';
            %ColField         = 'Col';
            ColCellField     = 'ColCell';
            ColUnitsField    = 'ColUnits';
            SortedByField    = 'SortedBy';
            SortedByColField = 'SortedByCol';
            
            
            %Nc = numel(AstC);
            %for Ic=1:1:Nc,
                ColIndDel = colname2ind(AstC,Col);
                Ncol      = numel(AstC.(ColCellField));
                % column indices to keep
                ColInd    = setdiff((1:1:Ncol),ColIndDel);
                
                AstC.(CatField) = AstC.(CatField)(:,ColInd);
                if (~isempty(AstC.(ColCellField))),
                    AstC.(ColCellField) = AstC.(ColCellField)(ColInd);
                    AstC = colcell2col(AstC);
                end
                if (~isempty(AstC.(ColUnitsField))),
                    AstC.(ColUnitsField) = AstC.(ColUnitsField)(ColInd);
                end
                AstC.(SortedByField) = [];
                AstC.(SortedByColField) = [];
            %end
        end
        
        function AstC=col_insert(AstC,Vec,Col)
            % Description: 
            
        end
        
        function AstC=col_concat(AstC1,AstC2,Col1,Col2)
        
        end
        
        function AstC=row_select(AstC,Ind)
            
        end
        
        function AstC=row_delete(AstC,Ind)
            
        end
        
        function AstC=row_insert(AstC,Vec,Ind)
            
        end
        
        function AstC=row_concat(AstC1,AstC2,Ind1,Ind2)
        
        end
        
        
%         function Ans=subsindex(AstC)
%             %
%             
%             CatField = 'Cat';
%             Ans = subsindex(AstC.(CatField));
%         end
        
        function Ans=subsref(AstC,varargin)
            % Description: This function control the behavior of AstCat
            %              to parenthesses. A few examples:
            %              AstC.Cat can be either a table or a numeric
            %              array. AstC.Cat(:,1) - will return the first column
            %              of AstC.Cat with its original format.
            %              However AstC(:,1) will return the first column
            %              in a numeric vector format even if it stored
            %              as a table.
            %              This means that if AstC.Cat is a table:
            %              sin(AstC.Cat(:,2)) will fail, while
            %              sin(AstC(:,2)) will work.
            % Input  : - AstCat object.
            %          * subsref arguments
            % Output : - The requested data.
            % Example: AstC.Cat(1:end,2)
            %          AstC(1:5,1)
            %          AstC.Col
            
            
            CatField = 'Cat';
            
            %Ans = 5;
            S = varargin{1};
            %S.type = '()';
            %S.subs = varargin;
            switch S(1).type
                case '()'
                    Ans = subsref(AstC.(CatField),S);
                    
                    if (istable(Ans)),
                        Ans = table2array(Ans);
                    end
                case '.'
                    
                    Ans = AstC.(S(1).subs);
                    if (numel(S)>1),
                        switch S(2).type
                            case '.'
                                % Deal with the case the user ask for a
                                % column using a field name:
                                % E.g., AstC.Cat.XWIN_IMAGE
                                if any(strcmp(S(2).subs,AstC.ColCell)),
                                    ColInd = colname2ind(AstC,S(2).subs);
                                    Ans = Ans(:,ColInd);
                                else
                                    Ans = subsref(Ans,S(2:end));
                                end
                            otherwise
                                Ans = subsref(Ans,S(2));
                        end
                    end
                    
                    
                case '{}'
                    error('Can not use {} as a reference to AstCat');
                otherwise
                    % do nothing
            end
            
        end
        
        
        % col_arith (simcat_colarith)
        % search (search_cat)
        % addcol
        % colrange simcat_colrange
        % matchcoo simcat_matchcoo
        % near_xy
        % near_coo
        
        % footprint
        % xcat
        % photcalib
        % load
        % mat2cat
        
        
        
        
        %-----------------------
        %--- Unary functions ---
        %-----------------------
        function obj=plus(Sim1,Sim2)
            % Description: Add SIM arrays (+)
            % Input   : - SIM array
            %           - SIM array
            % Outoput : - Sum of SIM arrays
            % Example : Sim1+Sim2
            obj = sim_imarith('In1',Sim1,'In2',Sim2,'Op','+');
        end

        function obj=minus(Sim1,Sim2)
            % Description: SUbtract SIM arrays (-)
            % Input  : - SIM array
            %          - SIM array
            % Output : - Subtracted SIM arrays
            % Example: Sim1 - Sim2
            obj = sim_imarith('In1',Sim1,'In2',Sim2,'Op','-');            
        end

        function obj=uminus(Sim)
            % Description: Multiply a SIM array by -1 (unary -1)
            % Input  : - A SIM array
            % Output : - The SIM array multiplied by -1
            % Example: -Sim
            obj = sim_imarith('In1',Sim,'In2',-1,'Op','.*');            
        end

        function obj=uplus(Sim)
            % Description: Multiply a SIM arry by + 1 (unary +1).
            % Input  : - A SIM array
            % Output : - The SIM array multiplied by +1.
            % Example: +Sim
            obj = Sim;
        end

        function obj=times(Sim1,Sim2)
            % Description: Scalar multiplication between SIM arrays (.*)
            % Input  : - Fisrt SIM array
            %          - Second SIM array
            % Output : - Scalar multiplications of the two SIM arrays
            % Example: Sim1.*Sim2
            obj = sim_imarith('In1',Sim1,'In2',Sim2,'Op','.*');
        end

        function obj=mtimes(Sim1,Sim2)
            % *
            obj = sim_imarith('In1',Sim1,'In2',Sim2,'Op','*');
        end

        function obj=rdivide(Sim1,Sim2)
            % ./
            obj = sim_imarith('In1',Sim1,'In2',Sim2,'Op','./');
        end

        function obj=power(Sim1,Sim2)
            % .^
            obj = sim_imarith('In1',Sim1,'In2',Sim2,'Op','.^');
        end

        function obj=mpower(Sim1,Sim2)
            % ^
            obj = sim_imarith('In1',Sim1,'In2',Sim2,'Op','^');
        end

        function obj=lt(Sim1,Sim2)
            % <
            obj = sim_imarith('In1',Sim1,'In2',Sim2,'Op','<');
        end

        function obj=gt(Sim1,Sim2)
            % >
            obj = sim_imarith('In1',Sim1,'In2',Sim2,'Op','>');
        end

        function obj=le(Sim1,Sim2)
            % <=
            obj = sim_imarith('In1',Sim1,'In2',Sim2,'Op','<=');
        end

        function obj=ge(Sim1,Sim2)
            % >=
            obj = sim_imarith('In1',Sim1,'In2',Sim2,'Op','>=');
        end

        function obj=ne(Sim1,Sim2)
            % ~=
            obj = sim_imarith('In1',Sim1,'In2',Sim2,'Op','~=');
        end

        function obj=eq(Sim1,Sim2)
            % ==
            obj = sim_imarith('In1',Sim1,'In2',Sim2,'Op','==');
        end

        function obj=and(Sim1,Sim2)
            % &
            obj = sim_imarith('In1',Sim1,'In2',Sim2,'Op','&');
        end

        function obj=or(Sim1,Sim2)
            % |
            obj = sim_imarith('In1',Sim1,'In2',Sim2,'Op','|');
        end

        function obj=not(Sim)
            % ~
            obj = sim_ufun(Sim,'Op',@not);
        end

        function obj=ctranspose(Sim)
            % '
            obj = sim_flip(Sim,'Op',@ctranspose);
        end

        function obj=transpose(Sim)
            % .'
            obj = sim_flip(Sim,'Op',@transpose);
        end

        function obj=sqrt(Sim)
            % sqrt
            obj = sim_ufun(Sim,'Op',@sqrt);
        end
        
        function obj=sin(Sim)
            % sin
            obj = sim_ufun(Sim,'Op',@sin);
        end

        function obj=cos(Sim)
            % cos
            obj = sim_ufun(Sim,'Op',@cos);
        end

        function obj=tan(Sim)
            % tan
            obj = sim_ufun(Sim,'Op',@tan);
        end

        function obj=asin(Sim)
            % asin
            obj = sim_ufun(Sim,'Op',@asin);
        end

        function obj=acos(Sim)
            % acos
            obj = sim_ufun(Sim,'Op',@acos);
        end

        function obj=atan(Sim)
            % atan
            obj = sim_ufun(Sim,'Op',@atan);
        end

        function obj=exp(Sim)
            % exp
            obj = sim_ufun(Sim,'Op',@exp);
        end
        
        function obj=log(Sim)
            % log
            obj = sim_ufun(Sim,'Op',@log);
        end

        function obj=log10(Sim)
            % log10
            obj = sim_ufun(Sim,'Op',@log10);
        end
        
        function obj=fft(Sim)
            % fft
            obj = sim_fft(Sim,'Op',@fft2);
        end
        
        function obj=ifft(Sim)
            % ifft
            obj = sim_fft(Sim,'Op',@ifft2);
        end
        
        function obj=round(Sim)
            % round
            obj = sim_ufun(Sim,'Op',@round);
        end

        function obj=ceil(Sim)
            % ceil
            obj = sim_ufun(Sim,'Op',@ceil);
        end
        
        function obj=floor(Sim)
            % floor
            obj = sim_ufun(Sim,'Op',@floor);
        end
        
        function obj=fix(Sim)
            % fix
            obj = sim_ufun(Sim,'Op',@fix);
        end
        
        function obj=real(Sim)
            % real
            obj = sim_ufun(Sim,'Op',@real);
        end
        
        function obj=imag(Sim)
            % imag
            obj = sim_ufun(Sim,'Op',@imag);
        end
        
        function obj=abs(Sim)
            % abs
            obj = sim_ufun(Sim,'Op',@abs);
        end
        
        function obj=angle(Sim)
            % angle
            obj = sim_ufun(Sim,'Op',@angle);
        end
        
        function obj=conj(Sim)
            % conj
            obj = sim_ufun(Sim,'Op',@conj);
        end
        
        
        %--- Binary functions ---
        function obj=atan2(Sim1,Sim2)
            % atan2
            obj = sim_imarith('In1',Sim1,'In2',Sim2','Op',@atan2);
        end

        %--- Scalar output functions ---
        function obj=sum(Sim)
            % Description: Return the sum of each SIM image.
            % Input  : - SIM array of images.
            % Output : - Vector of sum of each SIM image.
            obj = sim_ufunv(Sim,'Op',@sum,'NaN',false);
        end

        function obj=nansum(Sim)
            % nansum
            obj = sim_ufunv(Sim,'Op',@sum,'NaN',true);
        end

        function obj=mean(Sim)
            % mean
            obj = sim_ufunv(Sim,'Op',@mean,'NaN',false);
        end

        function obj=nanmean(Sim)
            % nanmean
            obj = sim_ufunv(Sim,'Op',@mean,'NaN',true);
        end

        function obj=median(Sim)
            % median
            obj = sim_ufunv(Sim,'Op',@median,'NaN',false);
        end

        function obj=nanmedian(Sim)
            % nanmedian
            obj = sim_ufunv(Sim,'Op',@median,'NaN',true);
        end

        function obj=std(Sim,varargin)
            % std
            obj = sim_ufunv(Sim,'Op',@std,'NaN',false,'Par',varargin);
        end

        function obj=nanstd(Sim,varargin)
            % nanstd
            obj = sim_ufunv(Sim,'Op',@std,'NaN',true,'Par',varargin);
        end

        function obj=var(Sim)
            % var
            obj = sim_ufunv(Sim,'Op',@var,'NaN',false);
        end

        function obj=nanvar(Sim)
            % nanvar
            obj = sim_ufunv(Sim,'Op',@var,'NaN',true);
        end

        function obj=min(Sim)
            % min
            obj = sim_ufunv(Sim,'Op',@min,'NaN',false);
        end

        function obj=nanmin(Sim)
            % nanmin
            obj = sim_ufunv(Sim,'Op',@min,'NaN',true);
        end

        function obj=max(Sim)
            % max
            obj = sim_ufunv(Sim,'Op',@max,'NaN',false);
        end

        function obj=nanmax(Sim)
            % nanmax
            obj = sim_ufunv(Sim,'Op',@max,'NaN',true);
        end

        function obj=mode(Sim)
            % mode using mode_image
            obj = sim_ufunv(Sim,'Op',@mode_image,'NaN',false);
        end

        function obj=nanmode(Sim)
            % nanmode using mode_image
            obj = sim_ufunv(Sim,'Op',@mode_image,'NaN',true);
        end

        function obj=skeness(Sim)
            % skewness
            obj = sim_ufunv(Sim,'Op',@skewness,'NaN',false);
        end

        function obj=nanskeness(Sim)
            % nanskewness
            obj = sim_ufunv(Sim,'Op',@skewness,'NaN',true);
        end

        function obj=kurtosis(Sim)
            % kurtosis
            obj = sim_ufunv(Sim,'Op',@kurtosis,'NaN',false);
        end

        function obj=nankurtosis(Sim)
            % nankurtosis
            obj = sim_ufunv(Sim,'Op',@kurtosis,'NaN',true);
        end

        function obj=moment(Sim,varargin)
            % moment
            obj = sim_ufunv(Sim,'Op',@moment,'NaN',false,'Par',varargin);
        end

        function obj=nanmoment(Sim,varargin)
            % nanmoment
            obj = sim_ufunv(Sim,'Op',@moment,'NaN',true,'Par',varargin);
        end

        function obj=prctile(Sim,P)
            % prctile (ignoring NaN)
            obj = sim_ufunv(Sim,'Op',@prctile,'NaN',true,'Par',P);
        end

        function obj=quantile(Sim,P)
            % quantile (ignoring NaN)
            obj = sim_ufunv(Sim,'Op',@quantile,'NaN',true,'Par',P);
        end

        function obj=iqr(Sim)
            % iqr (ignoring NaN)
            obj = sim_ufunv(Sim,'Op',@iqr,'NaN',true);
        end

        function [JD,ExpTime,obj] = julday(Sim)
            % julday
            [JD,ExpTime,obj] = sim_julday(Sim);
        end
        
        function [N,X]=hist(Sim,varargin)
            % hist 
            if (numel(Sim)>1),
                error('hist is defined for a single SIM class image');
            end
            [N,X] = hist(Sim.Im(:),varargin)
        end
        
        function [N,X]=histc(Sim,varargin)
            % histc
            if (numel(Sim)>1),
                error('histc is defined for a single SIM class image');
            end
            [N,X] = histc(Sim.Im(:),varargin)
        end
        
        

        %--- Structre functions ---
        function obj=isfield(Sim,Field)
            % isfield 
            obj = any(strcmp(fieldnames(Sim),Field));
        end

        function obj=isstruct(Sim)
            obj = true;  %isstruct(Sim) || isa(Sim,'SIM');
        end

        
        function obj=getkey(Sim,Keyword)
            % get image header keyword value
            HeaderField = 'Header';
            Nsim = numel(Sim);
            obj  = cell(Nsim,1);
            for Isim=1:1:Nsim,
                % for each image in SIM
                if (~isempty(Sim(Isim).(HeaderField))),
                    Flag = strcmp(Sim(Isim).(HeaderField)(:,1),Keyword);
                    if (any(Flag)),
                        obj{Isim} = Sim(Isim).(HeaderField){Flag,2};
                    else
                        obj{Isim} = NaN;
                    end
                else
                    obj{Isim} = NaN;
                end
            end
            
        end
        
        function [obj,val,com]=searchkey(Sim,String)
            % Description: Search an header keyword name that contains
            %              a specific string.
            % Input  : - SIM array
            %          - String to search.
            % Output : - Cell array of cell arrays of candidates header
            %            keyword names.
            %          - Cell array of values.
            %          - Cell array of comments.
            HeaderField = 'Header';
            Nsim = numel(Sim);
            obj = cell(Nsim,1);
            for Isim=1:1:Nsim,
                % for each image in SIM
                if (~isempty(Sim(Isim).(HeaderField))),
                    F = regexp(Sim(Isim).(HeaderField)(:,1),String,'match');
                    obj{Isim} = Sim(Isim).(HeaderField)(~isempty_cell(F),1);
                    val{Isim} = Sim(Isim).(HeaderField)(~isempty_cell(F),2);
                    com{Isim} = Sim(Isim).(HeaderField)(~isempty_cell(F),3);
                    if (Nsim>1),
                        fprintf('Header keywords in SIM %d\n',Isim);
                    end
                    disp(obj{Isim}')
                else
                    obj{Isim} = NaN;
                end
                
            end
            
        end
        
        function [Sim,Back,Std]=mode_fit(Sim,varargin)
            % run mode fit on image and populate
            % BackIm and ErrIm fields
            ImageField  = 'Im';
            BackImField = 'BackIm';
            ErrImField  = 'ErrIm';
            
            Nsim = numel(Sim);
            Back = zeros(Nsim,1);
            Std  = zeros(Nsim,1);
            for Isim=1:1:Nsim,
                
                [Back(Isim),Std(Isim)] = mode_fit(Sim(Isim).(ImageField),varargin{:});
                Sim(Isim).(BackImField) = Back(Isim);
                Sim(Isim).(ErrImField)  = Std(Isim);
            end
            
            
        end
        
        function Coo=xy2coo(Sim,varargin)
            % convert X,Y to RA,Dec
            % Input  : - SIm
            %          * The same input parameters as xy2sky.m
            %            i.e., X(pix), Y(pix),...
            % Outout : - Structure array with the following fields:
            %            .RA - J2000 R.A. [rad]
            %            .Dec - J2000 Dec. [rad]
   
            Nsim = numel(Sim);
            Coo  = struct('RA',cell(Nsim,1),'Dec',cell(Nsim,1));
            for Isim=1:1:Nsim,
                [Coo(Isim).RA,Coo(Isim).Dec] = xy2sky(Sim(Isim),varargin{:});
            end
            
        end
        
        function Coo=coo2xy(Sim,varargin)
            % convert RA,Dec to X,Y
            % Input:  - Sim
            %         * The same input parameters as sky2xy.m
            %           i.e., RA(rad),Dec(rad),...
            % Output: - Structure array with the following fields:
            %           .X - X coordinates [pix].
            %           .Y - Y coordinates [pix].
            Nsim = numel(Sim);
            Coo = struct('X',cell(Nsim,1),'Y',cell(Nsim,1));
            for Isim=1:1:Nsim,
                [Coo(Isim).X,Coo(Isim).Y] = sky2xy(Sim(Isim),varargin{:});
            end
            
        end
        
        function [Sim,ThreshIm]=addcat(Sim,varargin)
            % call mextractor and populate the Cat field
            [Sim,ThreshIm] = mextractor(Sim,varargin{:});            
        end
        
        function SubCat=near_xy(Sim,X,Y,Radius)
            % search objects near X,Y and sort by distance to search
            % coordinates
            % Input  : - Sim
            %          - X coordinate [pix]
            %          - Y coordinate [pix]
            %          - Search radius [pix]
            % Output : - Structure containing sub catalog of sources
            %            within search radius, sorted by distance to
            %            search center.
            CatField        = 'Cat';
            CatColField     = 'Col';
            CatColCellField = 'ColCell';
            Nsim = numel(Sim);
            SubCat = struct(CatField,cell(Nsim,1),...
                            CatColField,cell(Nsim,1),...
                            CatColCellField,cell(Nsim,1),...
                            'Dist',cell(Nsim,1));
            for Isim=1:1:Nsim,
                % for each image
                % check if catalog exist
                if (isempty(Sim(Isim).(CatField))),
                    Sim(Isim) = mextractor(Sim(Isim));
                end
                Dist = plane_dist(X,Y,...
                                  Sim(Isim).(CatField)(:,Sim(Isim).(CatColField).XWIN_IMAGE),...
                                  Sim(Isim).(CatField)(:,Sim(Isim).(CatColField).YWIN_IMAGE));
                Ind = find(Dist<=Radius);
                [~,SI] = sort(Dist(Ind));
                SInd = Ind(SI);  % indices sorted by distance
                
                SubCat(Isim).(CatField)        = Sim(Isim).(CatField)(SInd,:);
                SubCat(Isim).(CatColField)     = Sim(Isim).(CatColField);
                SubCat(Isim).(CatColCellField) = Sim(Isim).(CatColCellField);
                SubCat(Isim).Dist              = Dist(SInd);
                
            end
            
        end
        
        function obj=isbias(Sim,varargin)
            % Description: Check if images in SIM array are valid bias
            %              images (using is_bias_image.m).
            % Input  : - SIM array
            %          * Additional arguments to pass to is_bias_image.m
            % Output : - Vector of false/true flags, for each image in
            %            the SIM array, indicating if an image is a
            %            valid bias image.
            obj = is_bias_image(Sim,varargin{:});
        end
        
        function obj=isflat(Sim,varargin)
            obj = is_flat_image(Sim,varargin{:});
        end
        
        function obj=isarc(Sim,varargin)
            obj = is_arc_image(Sim,varargin{:});
        end
        
        function obj=iskeyval(Sim,varargin)
            % S.iskeyval('OBSTYPE','object')
            obj = is_head_keyval(Sim,{},varargin{:});
        end
        
        function obj=footprint(Sim,varargin)
            % Description: Get images footprints using the
            %              sim_footprint.m function.
            % Input  : - SIM array
            %          * Additional arguments to pass to sim_footprint.m
            % Output : - Structure array containing the footprint for each
            %            SIM image.
            obj = sim_footprint(Sim,varargin{:});
        end
        
        function [Gain,Sim]=gain(Sim,varargin)
            % Description: Get CCD gain from image header and multiply
            %              each image by its gain.
            % Input  : - SIM array.
            %          * Additional arguments to pass to sim_gain.m
            % Output : - Vector of gain factors for each image in the
            %            SIM array.
            %          - SIM array multiplied by the gain.
            % Example: [Gain, Sim]=Sim.gain;
            
            [Gain,Sim]=sim_gain(Sim,varargin{:});
            
        end
        
        function Sim=flipud(Sim,varargin)
            % Description: flip images in SIM array up-down
            % Input  : - SIM array.
            %          - Additional arguments to pass to sim_flip.m
            % Output : - SIM array in which the images are flipped up-down
            % Example: Sim.flipud
            Sim = sim_flip(Sim,varargin{:},'Op',@flipud);
        end
        
        function Sim=rotate(Sim,Rotation,varargin)
            % Description: Rotate SIM images
            % Input  : - SIM array.
            %          - Rotation angle [deg]
            %          * Additional parameters to pass to sim_rotate.m
            % Output : - Rotated SIM array
            % Example: Sim.rotate(50)
            Sim = sim_rotate(Sim,varargin{:},'Rotation',Rotation);
            
        end
        
        function Stat=stat(Sim,varargin)
            % Description: Get image statistics
            % Input  : - SIM array of images.
            %          * Additional parameters to pass to sim_stat.m
            % Output : - Structure array of images statistics
            % Example: Sim.stat
            Stat = sim_stat(Sim,varargin{:});
        end
        
        function [BiasSubSim,BiasSim] = bias(Sim,varargin)
            % Description: Search for bias images, construct bias
            %              and subtract from all images.
            % Input  : - SIM array of images.
            %          * Additional parameters to pass to sim_bias.m
            % Output : - Bias subtracted images.
            %          - The bias image.
            % Example: Sim.bias
            [BiasSubSim,BiasSim] = sim_bias(Sim,varargin{:}); 
        end
        
        function [BiasSubSim,BiasSim] = suboverscan(Sim,varargin)
            % Description: For each SIM image, search for bias overscan
            %              region, construct a 1-D bias image and subtract
            %              it from the image.
            % Input  : - SIM array of images.
            %          * Additional arguments to pass to sim_suboverscan.m
            % Output : - Bias overscan subtracted images.
            %          - 1-D overscan bias images.
            % Example: Sim.suboverscan
            [BiasSubSim,BiasSim] = sim_suboverscan(Sim,varargin{:});
            
        end
        
        function [ImSize] = imagesize(Sim,varargin)
            % Description: Get the size of SIM images.
            % Input  : - SIM array of images.
            %          * Additional arguments to pass to sim_imagesize.m
            % Output : - Two column matrix of image sizes [X,Y].
            % Example: Sim.imagesize
            ImSize = sim_imagesize(Sim,varargin{:});
        end
        
        function Sim = xcat(Sim,varargin)
            % Description: Match SIM catalog to external catalog and
            %              add information to catalog.
            %              See sim_xcat.m for details.
            % Input  : - SIM array of images with catalogs.
            %          * Additional arguments to pass to sim_xcat.m
            % Output : - SIM array with added columns to the catalog
            %            entries.
            % Example: sim.xcat('ExtCats',{@wget_sdss});
            Sim = sim_xcat(Sim,varargin{:});
        end
        
        function [Sim,ZP]=photcalib(Sim,varargin)
            % Description: Calculate and apply photometric calibration
            %              to SIM images catalog.
            %              See sim_photcalib.m for details.
            % Input  : - SIM array of images with catalogs.
            %          * Additional arguments to pass to sim_photcalib.m
            % Output : - SIM array of images with photometrically
            %            calibrated magnitudes.
            %          - Structure array with zero point fits.
            % Example: [Sim,ZP]=sim.photcalib;
            [Sim,ZP] = sim_photcalib(Sim,varargin{:});
        end
        
        
        % additional functions to add:
        % flip ???
        % fliplr
        % rot90
        % imagesize
        % resize
        % get_stamp
        % crdetect
        % saturated
        
        % near_coo
        % nearest_xy
        % nearest_coo
        % addextcat
        % ds9
        % ds9_regions
        % ds9_cat
        % ds9_extcat
        % back_std
        % imshow
        % filter/conv
        % getpsf (need a PSF class)
        % align
        % matchcat
        % relphot
        % relastrom
        % addastrom
        % twflat
        % domeflat
        % skyflat
        % coadd
        % combine
        % subtract
        % 
        
        %--- get/set functions ---
%         function Head=get.header(Obj,Keywords)
%             HeaderField = 'Header';
%             % get header or header keywords
%             if (nargin==1),
%                 Keywords = [];
%             end
%             Nsim = numel(Obj);
%             for Isim=1:1:Nsim,
%                 % for each image / get header
%                 Obj(Isim).(HeaderField)
%             end
%             
%         end
       
        %--- get functions ---
        %function obj=get.mean1(Sim)
        %    % mean
        %    obj = sim_ufunv(Sim,'Op',@mean,'NaN',false);        
        %end
    end
end

            
