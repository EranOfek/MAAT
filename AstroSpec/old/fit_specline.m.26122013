function [Fit]=fit_specline(Spec,Fun,varargin)
%------------------------------------------------------------------------------
% fit_specline function                                              AstroSpec
% Description: 
% Input  : - Spectrum to fit [Wavelength, Flux].
%            If empty matrix, then will attempt to read the spectrum from
%            the current figure.
%          - Function to fit.
%            If empty matrix than do not fit a function, but calculate
%            line flux and equivalent width.
%          * Arbitrary number of pairs of ...,key,val,... arguments.
%            The following keywords are available:
%            'Back'   - Method of background subtractuin:
%                       'none' - use fitting function only.
%                       'man'  - Interactive subtraction of background
%                                (default).
%                       Alternatively, this can be a vector that specify
%                       from where to obtain the background:
%                       [X1, X2, X3, X4].
%                       Where X1 and X2 mark the position of the left
%                       background region and X3 and X4 is for the right
%                       background region.
%            'Poly'   - Polynomial order of manual background subtraction.
%                       Default is 1.
%            'Plot'   - Plot fitted lines {'y' | 'n'}. Default is 'y'.
%            'PlotPar'- Cell array of additional parameters to pass to the
%                       fitted lines ploting function.
%                       Default is {'--','Color',[0.8 0.8 0.8]}.
%            'Par0'   - Vector of guess parameters.
%                       If equal 'guess' then will attempt to call the
%                       fitted function Fun('guess',Spec) which suppose
%                       to return a guess.
% Output : -
% Tested : Matlab 7.13
%     By : Eran Ofek                       Jul 2012
%    URL : http://weizmann.ac.il/home/eofek/matlab/
% Example: Fit=fit_specline(Spec,@fun_gauss);
%          Fun = @(Par,X) fun_gauss(Par(1:3),X)+fun_gauss(Par(4:6),X)
%          Fit=fit_specline(Spec,Fun,'Par0',[1 6630 10 1 6630 100]);
%          Fun = @(Par,X) fun_gauss(Par(1:3),X)+fun_lorentzian(Par(4:6),X)
%          Fit=fit_specline(Spec,Fun,'Par0',[1 6630 10 6630 100 10]);
%------------------------------------------------------------------------------


DefV.Back    = 'man';
DefV.Poly    = 1;
DefV.Plot    = 'y';
DefV.PlotPar = {'--','Color',[0.8 0.8 0.8]};
DefV.Par0    = 'guess';
InPar = set_varargin_keyval(DefV,'y','use',varargin{:});

OpenNewPlot = true;
if (isempty(Spec)),
   Spec = [get(get(gca,'Children'),'XData'), get(get(gca,'Children'),'YData')];
   OpenNewPlot = false;
end


if (~ischar(InPar.Back)),
   % assume InPar.Back is a 4 elements vector
   XL = InPar.Back(1:2);
   XR = InPar.Back(3:4);

   IL  = find(Spec(:,1)>min(XL) & Spec(:,1)<max(XL));
   IR  = find(Spec(:,1)>min(XR) & Spec(:,1)<max(XR));
   Iall= find(Spec(:,1)>(min( min(XL),min(XR) )) & ...
              Spec(:,1)<(max( max(XL),max(XR) )) );
   Ib  = [IL;IR];
   Res = fitgenpoly(Spec(Ib,1),Spec(Ib,2),1,InPar.Poly);   
   Back = [Spec(Iall,1),polyval(Res.Par,Spec(Iall,1))];

else
   switch lower(InPar.Back)
    case 'man'
       % interactive background subtraction
       if (OpenNewPlot),
          stairs(Spec(:,1),Spec(:,2),'k-');
       end
   
       ReFit = true;
       Hpb   = [];
       while (ReFit)
          fprintf('Zoom on\n');
          zoom on;
          input('press any key to continue','s');
          zoom off;
          fprintf('Select background region left of line to fit\n');
          fprintf('Two mouse left click to select background region\n');
          [XL,YL] = ginput(2);
          fprintf('Select background region right of line to fit\n');
          fprintf('Two mouse left click to select background region\n');
          [XR,YR] = ginput(2);
   
          % calc background
          IL  = find(Spec(:,1)>min(XL) & Spec(:,1)<max(XL));
          IR  = find(Spec(:,1)>min(XR) & Spec(:,1)<max(XR));
          Iall= find(Spec(:,1)>(min( min(XL),min(XR) )) & ...
    	          Spec(:,1)<(max( max(XL),max(XR) )) );
          Ib  = [IL;IR];
          Res = fitgenpoly(Spec(Ib,1),Spec(Ib,2),1,InPar.Poly);
          if (~isempty(Hpb)),
     	     delete(Hpb);
          end
          Back = [Spec(Iall,1),polyval(Res.Par,Spec(Iall,1))];
          switch lower(InPar.Plot)
           case 'y'
              hold on;
              Hpb = plot(Back(:,1),Back(:,2),InPar.PlotPar{:});
           otherwise
              % do nothing
          end
      
          R = input('Do you want to re-select/fit background (Y/[N]) : ','s');
          switch lower(R)
           case 'y'
   	    ReFit = true;
           otherwise
               ReFit = false;
          end
       end
    case 'none'
       % do nothing
       Back = [Spec(:,1), zeros(size(Spec(:,1)))];
    otherwise
       error('Unknown Back option');
   end
end


if (~isempty(Fun)),
   % fit
   if (~ischar(InPar.Par0)),
      Par0 = InPar.Par0;
   else
      try
         Par0 = feval(Fun,'guess',Spec(Iall,:));
      catch
         error('Guess parameters (Par0) is required');
      end
   end

   [Fit.Par,Fit.Resid,Fit.J,Fot.Cov,Fit.Err] = nlinfit_my(Spec(Iall,1),Spec(Iall,2)-Back(:,2),Fun,Par0);
   ModelY = feval(Fun,Fit.Par,Spec(Iall,1));
   switch lower(InPar.Plot)
    case 'y'
       hold on;
       plot(Spec(Iall,1),ModelY+Back(:,2),InPar.PlotPar{:});
   otherwise
       % do nothing
   end
   % calculate lines parameters
   Fit.ModelTotalFlux = trapz(Spec(Iall,1),ModelY);
   Fit.ModelTotalEW   = trapz(Spec(Iall,1),1 - ModelY./Back(:,2));
   Fit.ObsTotalFlux   = trapz(Spec(Iall,1),Spec(Iall,2)-Back(:,2));
   Fit.ObsTotalEW     = trapz(Spec(Iall,1),1 - Spec(Iall,2)./Back(:,2));
   Fit.Back           = Back;
   Fit.ModelY         = ModelY;
else
   % do not fit  calcl Flux and EW
   Fit.ObsTotalFlux   = trapz(Spec(Iall,1),Spec(Iall,2)-Back(:,2));
   Fit.ObsTotalEW     = trapz(Spec(Iall,1),1 - Spec(Iall,2)./Back(:,2));
   Fit.Back           = Back;

end



if (1==0),

Def.Interactive = 'y';
%if (nargin==1),
   Interactive = Def.Interactive;
%end

switch lower(Interactive)
 case 'y'
    stairs(Spec(:,1),Spec(:,2),'k','LineWidth',1)

    Norm = nanmedian(Spec(:,2));
    Spec(:,2) = Spec(:,2)./Norm;
    Fit.Norm = Norm;

    % take off NaNs
    I = find(~isnan(Spec(:,2)));
    Spec = Spec(I,:);


%    stairs(Spec(:,1),Spec(:,2),'k','Color',[0.8 0.8 0.8],'LineWidth',2)
    hold on;

    zoom on;
    R = input('Zoom in on region to fit - press return to continue','s');

    fprintf('Mark continuum on left side of line (using two mouse clicks)\n');
    [ContLX,~] = ginput(2);
    Icl = find(Spec(:,1)>=min(ContLX) & Spec(:,1)<=max(ContLX));
    fprintf('Mark continuum on right side of line (using two mouse clicks)\n');
    [ContRX,~] = ginput(2);
    Icr = find(Spec(:,1)>=min(ContRX) & Spec(:,1)<=max(ContRX));
    Ic  = [Icl;Icr];
    Irange = [min(Ic):1:max(Ic)];
   
Deg=1
    Par = fitpoly(Spec(Ic,1),Spec(Ic,2),ones(size(Ic)),Deg,3);
    ContY = polyval(flipud(Par),Spec(Irange,1));
    plot(Spec(Irange,1),ContY,'b--');

    fprintf('Best fit contimuum is shown in blue line\n');


%fit_gaussians
%    Fun = @(Par,WL) Par(1).*exp(-(WL-Par(2)).^2./(2.*Par(3).^2))
%    Fun = @(Par,WL) Par(1).*exp(-(WL-Par(2)).^2./(2.*Par(3).^2)) + Par(4).*exp(-(WL-Par(5)).^2./(2.*Par(6).^2))
%     Fun = @(Par,WL) Par(1).*exp(-(WL-Par(2)).^2./(2.*Par(3).^2)) + Par(4).*exp(-(WL-Par(5)).^2./(2.*Par(6).^2)) + Par(7).*exp(-(WL-Par(8)).^2./(2.*Par(9).^2))

    % get best guess
    Par0    = feval(Fun,'get_guess',Spec(Irange,:));
    
%    Par0(1) = mean(Spec(Irange,2));  % amplitude
%    Par0(2) = mean(Spec(Irange,1));  % central wavelength
%    Par0(3) = (max(Spec(Irange,1)) - min(Spec(Irange,1)))./10; % std
%    Par0(4) = Par0(1).*2;
%    Par0(5) = Par0(2);
%    Par0(6) = Par0(3)./4;
%    Par0(7) = Par0(1).*3;
%    Par0(8) = Par0(2);
%    Par0(9) = Par0(3)./8;


    WL      = Spec(Irange,1);
    %BestPar = nlinfit(WL, Spec(Irange,2)-ContY,Fun,Par0);
    %BestPar = nlinfit(WL, Spec(Irange,2)-ContY,@fun_2gauss_conv,Par0);
    [BestPar,Fit.Resid,~,Fit.Cov] = nlinfit(WL, Spec(Irange,2)-ContY,Fun,Par0);
    Fit.TotFlux  = trapz(WL,feval(Fun,BestPar,WL) + ContY);
    Fit.ContFlux = trapz(WL,ContY);
    
    if (length(Par0)>4),
       Fit.Flux1    = trapz(WL, feval(Fun,[BestPar(1:3), zeros(1,3)],WL));
       Fit.Flux2    = trapz(WL, feval(Fun,[zeros(1,3), BestPar(4:6)],WL));
    else
       Fit.Flux1    = NaN;
       Fit.Flux2    = NaN;
    end
    Fit.EqW      = trapz(WL, 1 - (feval(Fun,BestPar,WL) + ContY)./ContY);

    Fit.BestPar = BestPar;   


% renormalize
Fit.BestPar(1) = Fit.BestPar(1).*Fit.Norm;
if (length(Par0)>3),
   Fit.BestPar(4) = Fit.BestPar(4).*Fit.Norm;
end
Fit.TotFlux    = Fit.TotFlux.*Fit.Norm;
Fit.ContFlux   = Fit.ContFlux.*Fit.Norm;
Fit.Flux1      = Fit.Flux1.*Fit.Norm;
Fit.Flux2      = Fit.Flux2.*Fit.Norm;
Fit.StdResid   = std(Fit.Resid).*Fit.Norm;

FittedSpec = [WL,Norm.*(feval(Fun,BestPar,WL) + ContY)];
plot(WL,Norm.*(feval(Fun,BestPar,WL) + ContY),'g--','Color',[0.8 0.8 0.8],'LineWidth',2);




%SubContSpec = [Spec(:,1), Spec(:,2)-ContY




 otherwise


end

end
