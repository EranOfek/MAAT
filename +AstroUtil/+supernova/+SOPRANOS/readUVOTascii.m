function tab = readUVOTascii(filename, startRow, endRow)
%readUVOTascii Import UVOT subtracted data from an ascii file.
%   tab = readUVOTascii(FILENAME) Reads data from text file FILENAME
%   for the default selection.
%
%   tab = readUVOTascii(FILENAME, STARTROW, ENDROW) Reads data from
%   rows STARTROW through ENDROW of text file FILENAME.
%
% Example:
%   tab = readUVOTascii('ZTF18abeajml.ascii', 2, 86);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2019/12/14 11:25:02

%% Initialize variables.
delimiter = ' ';
if nargin<=2
    startRow = 2;
    endRow = inf;
end

%% Read columns of data as text:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read the file header
headerArray = textscan(fileID, formatSpec, 1, 'Delimiter', ' ', 'MultipleDelimsAsOne', true, 'EndOfLine', '\r\n');
frewind(fileID);
for ih=1:length(headerArray),header{ih}=headerArray{ih}{1};end

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'MultipleDelimsAsOne', true, 'TextType', 'string', 'HeaderLines', startRow(1)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'MultipleDelimsAsOne', true, 'TextType', 'string', 'HeaderLines', startRow(block)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric text to numbers.
% Replace non-numeric text with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = mat2cell(dataArray{col}, ones(length(dataArray{col}), 1));
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,4,5,6]
    % Converts text in the input cell array to numbers. Replaced non-numeric
    % text with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1)
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData(row), regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if numbers.contains(',')
                thousandsRegExp = '^[-/+]*\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'))
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric text to numbers.
            if ~invalidThousandsSeparator
                numbers = textscan(char(strrep(numbers, ',', '')), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch
            raw{row, col} = rawData{row};
        end
    end
end

% Convert the contents of columns with dates to MATLAB datetimes using the
% specified date format.
try
    dates{2} = datetime(dataArray{2}, 'Format', 'yyyy-MM-dd''T''HH:mm:ss.SSS', 'InputFormat', 'yyyy-MM-dd''T''HH:mm:ss.SSS');
catch
    try
        % Handle dates surrounded by quotes
        dataArray{2} = cellfun(@(x) x(2:end-1), dataArray{2}, 'UniformOutput', false);
        dates{2} = datetime(dataArray{2}, 'Format', 'yyyy-MM-dd''T''HH:mm:ss.SSS', 'InputFormat', 'yyyy-MM-dd''T''HH:mm:ss.SSS');
    catch
        dates{2} = repmat(datetime([NaN NaN NaN]), size(dataArray{2}));
    end
end

dates = dates(:,2);

%% Split data into numeric and string columns.
rawNumericColumns = raw(:, [1,4,5,6]);
rawStringColumns = string(raw(:, 3));


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),rawNumericColumns); % Find non-numeric cells
rawNumericColumns(R) = {NaN}; % Replace non-numeric cells

%% Make sure any text containing <undefined> is properly converted to an <undefined> categorical
idx = (rawStringColumns(:, 1) == "<undefined>");
rawStringColumns(idx, 1) = "";

%% Create output variable
% tab = table;
% tab.MJD = cell2mat(rawNumericColumns(:, 1));
% tab.ISOT = dates{:, 1};
% tab.FILTER = categorical(rawStringColumns(:, 1));
% tab.AB_FLAM_AA = cell2mat(rawNumericColumns(:, 2));
% tab.AB_FLAM_AA_ERRM = cell2mat(rawNumericColumns(:, 3));
% tab.AB_FLAM_AA_ERRP = cell2mat(rawNumericColumns(:, 4));

% For code requiring serial dates (datenum) instead of datetime, uncomment
% the following line(s) below to return the imported dates as datenum(s).

% ZTF18abeajml.ISOT=datenum(ZTF18abeajml.ISOT);
data{1} = cell2mat(rawNumericColumns(:, 1));
data{2} = dates{:, 1};
data{3} = categorical(rawStringColumns(:, 1));
data{4} = cell2mat(rawNumericColumns(:, 2));
data{5} = cell2mat(rawNumericColumns(:, 3));
data{6} = cell2mat(rawNumericColumns(:, 4));

tab = table(data{:}, 'VariableNames',header(1:end-1));

