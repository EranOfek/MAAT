function data = readZTFtxt(filename, startRow, endRow)
% read ZTF text file
% Package: AstroUtil.supernove.SOPRANOS
% Description: read ZTF text file
% Input  : - file name
% Output : - Table with file contents
%               
% See also: AstroUtil.supernova.SOPRANOS.calcGrid
% Tested : Matlab 9.5
%     By : Noam Ganot                      Oct 2019
%    URL : http://weizmann.ac.il/home/eofek/matlab/
% Example:
% AstroUtil.supernova.SOPRANOS.readZTFtxt('ZTF18abokyfk_unbinned.txt');
% Reliable: 2
%--------------------------------------------------------------------------

% Auto-generated by MATLAB on 2019/02/16 10:21:34

%% Initialize variables.
delimiter = ',';
if nargin<=2
    startRow = 2;
    endRow = inf;
end

%% Format for each line of text:
%   column1: double (%f)
%	column2: double (%f)
%   column3: double (%f)
%	column4: double (%f)
%   column5: double (%f)
%	column6: double (%f)
%   column7: double (%f)
%	column8: categorical (%C)
%   column9: categorical (%C)
% For more information, see the TEXTSCAN documentation.
headerSpec = '%s%s%s%s%s%s%s%s%s%[^\n\r]';
formatSpec = '%f%f%f%f%f%f%f%C%C%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read headers of data according to the header format.
headerArray = textscan(fileID, headerSpec, 1, 'Delimiter', delimiter, 'EndofLine', '\r\n');
frewind(fileID);

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.

dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines', startRow(1)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines', startRow(block)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Create output variable
% data = table(dataArray{1:end-1}, 'VariableNames', {'jd','mag','magerr','flux','fluxerr','absmag','absmagerr','filter','instr'});
for i=1:length(headerArray),header{i}=headerArray{i}{1};end
data = table(dataArray{1:end-1}, 'VariableNames',header(1:end-1));
