%--------------------------------------------------------------------------
% ClassPSF class                                                     class
% Description: A class of structure (single elemnt array) of point spread
%              function (PSF).
%              PSF are stored either as a single image, a function
%              that return the PSF (in a specific image position),
%              or a cube pf PSF at differenr positions in the image.
% Input  : null
% Output : null
% Tested : Matlab R2014a
%     By : Eran O. Ofek                    Nov 2014
%    URL : http://weizmann.ac.il/home/eofek/matlab/
% Reliable: 2
%--------------------------------------------------------------------------

classdef ClassPSF
    properties (SetAccess = public)
        PSF       % either a matrix, cell array of matrices, or structure of .ImPSF, or a function handle [ImPSF,ErrPSF]=F(Par,X,Y)
        ErrPSF    
        ParPSF = {};  % Default parameters for PSF function
        CooPSF = [];  % corrdinates for PSFs [X,Y] - empty for all image...
%         
%         Im
%         Coo
%         FunPSF           % with parameters: PSF=fun(x,y,Size,FunParPSF{:})
%         FunParPSF = {};
%         PosPSF           % Cube of PSFs (psfindex,X,Y), where PSF index referes to different locations
%         PosCoo           % Matrix of [X,Y] coordinates refers to PSF index
%         StdPSF
%         ErrPSF
%         NpixUse
%         Stat             % additional statistics
%         UserData
    end
    

    %-------------------
    %--- Constructor ---
    %-------------------
    methods
        
        function Psf=ClassPSF(N,M)
            % Description: ClassPSF class constructor.
            % Input  : - Number of rows, or [row, columns] Default is 1.
            %          - Number of columns. Default is 1.
            % Output : - A ClassPSF object of the requested size.


            if (nargin==0),
                N = 1;
                M = 1;
            elseif (nargin==1),
                if (numel(N)>1),
                    M = N(2);
                else
                    M = 1;
                end
            else
                % do nothing
            end

            for I=1:1:N,
                for J=1:1:M,
                    Psf(I,J).PSF = [];
                end
            end
            
        end
        
                
    end
    
    
    
    %------------------------------------
    %--- Get PSF from ClassPSF object ---
    %------------------------------------
    methods

        
        function [P,Pe]=getpsf(Psf,Coo,Par)
            % Description: Get the PSF from a single element ClassPSF
            %              object.
            % Input  : - A single element ClassPSF object.
            %          - A two elements vector of [X,Y] coordinates at
            %            which to return the PSF.
            %            If empty then attempt to ignore coordinates.
            %            Default is empty.
            %          - Cell array of parameters to pass to the PSF
            %            function handle. Default is {}.
            % Output : - A matrix of PSF.
            %          - A matrix of error in PSF estimate.
            % See also: getmpsf.m
            % Example: [P,Pe]=getpsf(Psf(1));
            
            
            PSF_Field    = 'PSF';
            ErrPSF_Field = 'ErrPSF';
            
            Def.Coo = [];
            Def.Par = {};
            if (nargin==1),
                Coo = Def.Coo;
                Par = Def.Par;
            elseif (nargin==2),
                Par = Def.Par;
            else
                % do nothing
            end
            
            if (numel(Psf)>1),
                error('Input must be a single element ClassPSF object');
            end
                
           
           if (isnumeric(Psf.(PSF_Field))),
               % PSF is numeric - a single PSF for the entire image
               P  = Psf.(PSF_Field);
               Pe = Psf.(ErrPSF_Field);
           elseif isa(Psf.(PSF_Field),'function_handle')
               % PSF is a function
               if (isempty(Coo)),
                   % Coo is not provided will attempt to ask for PSF
                   % without Coo
                   [P,Pe] = Psf.(PSF_Field)(Par{:});
               else
                   if (nume(Coo)~=2),
                       error('Coo must have two elements [X,Y]');
                   end
                   [P,Pe] = Psf.(PSF_Field)(Par{:},Coo(1),Coo(2));
               end
           elseif (iscell(Psf.(PSF_Field))),
               % A cell array of PSFs each one corresponds to a different
               % location.
               % The PSF locations are specified by Par parameter.
               
               error('Cell array PSF is not supported yet');
           elseif (isstruct(Psf.(PSF_Field))),
               error('Structure array PSF is not supported yet');
           else
               error('Unknown Psf.PSF type');
           end
        end
        
             
        function [P,Pe]=getmpsf(Psf,Coo,Par)
            % Description: Get the PSF from a multiple elements ClassPSF
            %              object.
            % Input  : - A ClassPSF object.
            %          - A two column matrix of [X,Y] coordinates at
            %            which to return the PSF.
            %            If ClassPSF object contain a single element and
            %            Coo multiple elements, then return the PSF for
            %            each location.
            %            If empty then attempt to ignore coordinates.
            %            Default is empty.
            %          - Cell array of parameters to pass to the PSF
            %            function handle. Default is {}.
            % Output : - A cell array of PSF matrices.
            %          - A cell array of PSF matrices of error in
            %            PSF estimate.
            % See also: getpsf.m
            % Example: [P,Pe]=getmpsf(Psf(1));
        
            Def.Coo = [];
            Def.Par = {};
            if (nargin==1),
                Coo = Def.Coo;
                Par = Def.Par;
            elseif (nargin==2),
                Par = Def.Par;
            else
                % do nothing
            end
            
            Npsf = numel(Psf);
            Ncoo = size(Coo,1);
            N    = max(Npsf,Ncoo);
            P    = cell(N,1);
            Pe   = cell(N,1);
            for I=1:1:N,
                Ipsf = min(I,Npsf);
                Icoo = min(I,Ncoo);
               
                if (isempty(Coo)),
                    Coo1 = [];
                else
                    Coo1 = Coo(Icoo,:);
                end
                [P{I},Pe{I}] = getpsf(Psf(Ipsf),Coo1,Par);
            end
            
        end
        
        
    end
    
    %------------------------------
    %--- Some useful PSF shapes ---
    %------------------------------
    methods
        function Psf=insert_psf(Psf,P,varargin)
            % Description: Insert a PSF into a ClassPSF object.
            % Input  : - A ClassPSF object.
            %          - A PSF to insert into the ClassPSF object.
            %            This can be one of the followings:
            %            A numeric matrix to insert to each one of the
            %            ClassPSF object elements;
            %            A cell array of matrices. Each cell element will
            %            be inserted to the corresponding ClassPSF object
            %            element; A function handle that return a PSF
            %            matrix.
            %          * Arbitrary number of arguments to pass to the
            %            function handle that generate the PSF
            % Output : - A ClassPSF object with the PSF field populated.
            % Example: P=insert_psf(ClassPSF,ones(3,3);
            %          P=insert_psf(CalssPSF,@kernel_gauss);
            %          P=insert_psf(CalssPSF,@kernel_aper,3);
            %          P=insert_psf(CalssPSF,@kernel_annulus);
            %          P=insert_psf(CalssPSF,@kernel_exp,2.5,19,19);
            
            PSF_Field = 'PSF';
            
            Np   = numel(P);
            Npsf = numel(Psf);
            for Ipsf=1:1:Npsf,
                if (iscell(P)),
                    % P is a cell array of matrices
                    Icell = min(Ipsf,Np);
                    Psf(Ipsf).(PSF_Field) = P{Icell};
                elseif (isnumeric(P)),
                    Psf(Ipsf).(PSF_Field) = P;
                elseif (isa(P,'function_handle')),
                    Psf(Ipsf).(PSF_Field) = P(varargin{:});
                    
                else
                    error('Unknown PSF type to insert');
                end
                
            end
            
        
        end
        
    end
    
    
    %-------------------------------------
    %--- Statistics of ClassPSF object ---
    %-------------------------------------
    methods
        
         function [SumPsf]=sum_psf(Psf,varargin)
            % Description: Calculate the sum of each PSF in a ClassPSF
            %              object.
            % Input  : - A ClassPSF object.
            %          - A two column matrix of [X,Y] coordinates at
            %            which to return the PSF.
            %            If ClassPSF object contain a single element and
            %            Coo multiple elements, then return the PSF for
            %            each location.
            %            If empty then attempt to ignore coordinates.
            %            Default is empty.
            %          - Cell array of parameters to pass to the PSF
            %            function handle. Default is {}.
            % Output : - An array in which each element is the sum of each
            %            PSF.
            % See also: rms_psf.m
            % Example: [S]=sum_psf(Psf(1));


            Npsf   = numel(Psf);
            P      = getmpsf(Psf,varargin{:});
            
            SumPsf = zeros(size(Psf));
            for Ipsf=1:1:Npsf,
                SumPsf(Ipsf) = sum(P{Ipsf}(:));
            end
            
         end
        
         function [RmsPsf]=rms_psf(Psf,varargin)
            % Description: Calculate the sqrt of sum of squares of each
            %              PSF in a ClassPSF object.
            % Input  : - A ClassPSF object.
            %          - A two column matrix of [X,Y] coordinates at
            %            which to return the PSF.
            %            If ClassPSF object contain a single element and
            %            Coo multiple elements, then return the PSF for
            %            each location.
            %            If empty then attempt to ignore coordinates.
            %            Default is empty.
            %          - Cell array of parameters to pass to the PSF
            %            function handle. Default is {}.
            % Output : - An array in which each element is the sqrt of sum
            %            of squares of each PSF.
            % See also: sum_psf.m
            % Example: [S]=rms_psf(Psf(1));


            Npsf   = numel(Psf);
            P      = getmpsf(Psf,varargin{:});
            
            RmsPsf = zeros(size(Psf));
            for Ipsf=1:1:Npsf,
                RmsPsf(Ipsf) = sqrt(sum(P{Ipsf}(:).^2));
            end
            
         end
        
         
         function [X,Y,X2,Y2,XY] = moment_psf(Psf,MomentSigma,varargin)
                % Description: Calculate 1st and 2nd moments of PSFs.
                %              Assumes all the PSF have the same size.
                % Input  : - A ClassPSF object.
                %          - Sigma of Gaussian by which to weight the pixels.
                %            Default is 1.5.
                %          - A two column matrix of [X,Y] coordinates at
                %            which to return the PSF.
                %            If ClassPSF object contain a single element and
                %            Coo multiple elements, then return the PSF for
                %            each location.
                %            If empty then attempt to ignore coordinates.
                %            Default is empty.
                %          - Cell array of parameters to pass to the PSF
                %            function handle. Default is {}.
                % Output : - X first moment.
                %          - Y first moment.
                %          - X^2 second moment.
                %          - Y^2 second moment.
                %          - X*Y second moment.
             
                Def.MomentSigma = 1.5;
                if (nargin==1),
                    MomentSigma = Def.MomentSigma;
                end
                if (isempty(MomentSigma)),
                    MomentSigma = Def.MomentSigma;
                end
                
                SizeP = size(Psf);
                Npsf  = numel(Psf);
                P     = getmpsf(Psf,varargin{:});
                % allocate output
                X     = zeros(SizeP);
                Y     = zeros(SizeP);
                if (nargout>1),
                    X2     = zeros(SizeP);
                    Y2     = zeros(SizeP);
                    XY     = zeros(SizeP);
                end
                for Ipsf=1:1:Npsf,
                    % calc moments for each PSF:
                    Size = size(P{Ipsf});
                    if (nargout>2),
                        [Mom,Mom2] = im_moments(P{Ipsf}, floor(Size(2).*0.5),...
                                                         floor(Size(1).*0.5),...
                                                         floor(min(Size).*0.5), MomentSigma);
                        X(Ipsf)  = Mom.X;
                        Y(Ipsf)  = Mom.Y;
                        X2(Ipsf) = Mom2.X2;
                        Y2(Ipsf) = Mom2.Y2;
                        XY(Ipsf) = Mom2.XY;
                    else
                        [Mom]      = im_moments(P{Ipsf}, floor(Size(2).*0.5),...
                                                         floor(Size(1).*0.5),...
                                                         floor(min(Size).*0.5), MomentSigma);
                        X(Ipsf)  = Mom.X;
                        Y(Ipsf)  = Mom.Y;
                    end
                end
                
                
                
         end
         
         function [CurveGrowth,RadHalf]=curve_growth_psf(Psf,varargin)
                % Description: Calculate the curve of growth for the PSFs
                %              in ClassPSF object.
                % Input  : - A ClassPSF object.
                %          - A two column matrix of [X,Y] coordinates at
                %            which to return the PSF.
                %            If ClassPSF object contain a single element and
                %            Coo multiple elements, then return the PSF for
                %            each location.
                %            If empty then attempt to ignore coordinates.
                %            Default is empty.
                %          - Cell array of parameters to pass to the PSF
                %            function handle. Default is {}.
                % Output : - A matrix of curve of growth.
                %            Each column represent a PSF. The first line is
                %            for the inner radius (1) and the last line is
                %            for the outer radius. Radii steps is 1.
                %            The curve of growth is normalize such that the
                %            sum of each PSF is 1.
                %          - Vector of radii indicating for each PSF, the
                %            radius that contains half of the light.
                
                RadStep = 1;
                
                Npsf  = numel(Psf);
                P     = getmpsf(Psf,varargin{:});
                % get the size of the 1st PSF
                % assumes all PSFs have the same size
                Size     = size(P{1});
                MaxRad   = floor(min(Size).*0.5);
                RadVec   = (1:RadStep:MaxRad);
                % allocate output
                CurveGrowth = zeros(MaxRad,Npsf);
                RadHalf     = zeros(Npsf,1);
                % calculate moments
                [X,Y] = moment_psf(Psf,[],varargin{:});
                [MatX,MatY] = meshgrid((1:1:Size(2)),(1:1:Size(1)));
                
                for Ipsf=1:1:Npsf,
                    MatR = sqrt((MatX-X(Ipsf)).^2 + (MatY-Y(Ipsf)).^2);
                    % make sure PSF is normalized to unity
                    P{Ipsf} = P{Ipsf}./sum(P{Ipsf}(:));
                    for Rad=1:RadStep:MaxRad,
                        CurveGrowth(Rad,Ipsf) = sumnd(P{Ipsf}(MatR<=Rad));
                    end
                    
                    RadHalf(Ipsf) = interp1(CurveGrowth,RadVec,0.5);
                end
                
         end
         
         
         
         % function fit_psf
         
         
         
         
    end
    
        
%         
%         
%         function Psf=getpsf1(Psf,Size,X,Y)
%             % Description: Calculate the PSF at a specific position in
%             %              the image.
%             % Input  : - PSF object.
%             %          - Size of the output PSF. Default is 21x21.
%             %          - X position at which to calculate the PSF.
%             %            Default is 1.
%             %          - Y position at which to calculate the PSF.
%             %            Default is 1.
%             
%             PSFField        = 'Im';
%             CooField        = 'Coo';
%             FunPSFField     = 'FunPSF';
%             PosPSFField     = 'PosPSF';
%             PosCooField     = 'PosCoo';
%             FunParPSFField  = 'FunParPSF';
%             Npsf = numel(Psf);
%             Def.Size = 21;
%             Def.X    = 1;
%             Def.Y    = 1;
%             if (nargin==1),
%                 Size = Def.Size;
%                 X    = Def.X;
%                 Y    = Def.Y;
%             elseif (nargin==2),
%                 X    = Def.X;
%                 Y    = Def.Y;
%             elseif (nargin==4),
%                 % do nothing
%             else
%                 error('Illegal number of input arguments');
%             end
%                 
%             
%             for Ipsf=1:1:Npsf,
%                 if (~isempty(Psf(Ipsf).(FunPSFField))),
%                     % FunPSF has first priority
%                     % get the PSF using FunPSF
%                     
%                     Psf(Ipsf).(PSFField) = Psf(Ipsf).(FunPSFField)(X,Y, Size, Psf(Ipsf).(FunParPSFField){:});
%                     Psf(Ipsf).(CooField) = [X,Y];
%                     
%                 else
%                     if (~isempty(Psf(Ipsf).(PosPSFField))),
%                         % PosPSF has second priority
%                         % get the PSF using PosPSF
%                         % Interpolate the PSFs
%                         
%                         Psf(Ipsf).(PSFField) = sqeeze(interp2(Psf(Ipsf).(PosCooField)(:,1),...
%                                 Psf(Ipsf).(PosCooField)(:,2),...
%                                 Psf(Ipsf).(PosPSFField),X,Y,InterpMethod));
%                         Psf(Ipsf).(CooField) = [X,Y];
%                         
%                     else
%                         % Im has the third priority
%                         % get the PSF directly from Im
%                         if (isempty(Psf(Ipsf).(PSFField))),
%                             error('Psf in index %d is not populated',Ipsf);
%                         end
%                     end
%                 end
%                     
%             end
%                     
%         end

        % See list of overload functions
        % http://www.mathworks.com/help/matlab/matlab_oop/implementing-operators-for-your-class.html

        
  
        
end

            
